#!/bin/bash
# AI_AGE_SDLC Master Orchestrator
# Complete Software Development Lifecycle Automation

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load environment if exists
if [ -f .env ]; then
    source .env
fi

show_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
    ___    ____       ___   ____  ______       _____ ____  __    ______
   /   |  /  _/      /   | / ___// ____/      / ___// __ \/ /   / ____/
  / /| |  / /       / /| |/ __ \/ __/         \__ \/ / / / /   / /     
 / ___ |_/ /       / ___ / /_/ / /___        ___/ / /_/ / /___/ /___   
/_/  |_/___/      /_/  |_\____/_____/       /____/_____/_____/\____/   
                                                                        
        AI-Driven Age Software Development Lifecycle v2.0
        ================================================
EOF
    echo -e "${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    echo -e "${YELLOW}Checking prerequisites...${NC}"
    
    local missing_tools=()
    
    # Check required tools
    for tool in git curl jq python3; do
        if ! command -v $tool &> /dev/null; then
            missing_tools+=($tool)
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo -e "${RED}Missing required tools: ${missing_tools[*]}${NC}"
        echo "Please install missing tools and try again."
        exit 1
    fi
    
    echo -e "${GREEN}✅ All prerequisites met${NC}"
}

# Function to setup new project
setup_new_project() {
    echo -e "${BLUE}🚀 Setting up NEW project${NC}"
    
    read -p "Enter repository name: " REPO_NAME
    read -p "Enter GitHub organization/username: " GITHUB_ORG
    read -p "Enter default branches (comma-separated, default: main,develop,staging): " BRANCHES
    BRANCHES=${BRANCHES:-"main,develop,staging"}
    
    # Create repository structure
    echo -e "${YELLOW}Creating repository structure...${NC}"
    
    # Check if we need to create in parent directory
    if [ -d "../${REPO_NAME}" ]; then
        echo -e "${YELLOW}Repository directory already exists. Using existing.${NC}"
        cd "../${REPO_NAME}"
    else
        mkdir -p "../${REPO_NAME}"
        cd "../${REPO_NAME}"
        git init
    fi
    
    # Create default branches
    IFS=',' read -ra BRANCH_ARRAY <<< "$BRANCHES"
    for branch in "${BRANCH_ARRAY[@]}"; do
        branch=$(echo "$branch" | xargs)  # Trim whitespace
        git checkout -b "$branch" 2>/dev/null || git checkout "$branch"
        echo -e "${GREEN}✅ Created/switched to branch: $branch${NC}"
    done
    
    # Setup remote if not exists
    if ! git remote | grep -q "origin"; then
        git remote add origin "https://github.com/${GITHUB_ORG}/${REPO_NAME}.git"
        echo -e "${GREEN}✅ Remote origin added${NC}"
    fi
    
    # Initialize with baseline on develop
    git checkout develop 2>/dev/null || git checkout -b develop
    
    # Create initial structure
    cat > README.md << EOF
# ${REPO_NAME}

AI_AGE_SDLC Enabled Project

## Setup
This project uses AI_AGE_SDLC for automated development lifecycle management.

## Branches
- main: Production branch
- develop: Development branch  
- staging: Staging/testing branch
- feature/*: Feature branches

## Workflow
1. Create feature branch from develop
2. Implement with AI_AGE_SDLC
3. Automated testing and validation
4. Auto-commit and push
5. Create PR to develop

Generated by AI_AGE_SDLC v2.0
EOF
    
    git add README.md
    git commit -m "Initial commit: AI_AGE_SDLC project initialization" 2>/dev/null || true
    
    echo -e "${GREEN}✅ Repository ${REPO_NAME} initialized${NC}"
    echo -e "${BLUE}📍 Current directory: $(pwd)${NC}"
}

# Function to setup modification project
setup_modification_project() {
    echo -e "${BLUE}🔧 Setting up MODIFICATION project${NC}"
    
    read -p "Enter repository URL or local path: " REPO_URL
    read -p "Enter target branch (default: develop): " TARGET_BRANCH
    TARGET_BRANCH=${TARGET_BRANCH:-develop}
    
    # Determine if remote or local
    if [[ $REPO_URL == http* ]] || [[ $REPO_URL == git@* ]]; then
        # Clone from remote
        REPO_NAME=$(basename "$REPO_URL" .git)
        echo -e "${YELLOW}Cloning from remote...${NC}"
        
        if [ ! -d "../${REPO_NAME}" ]; then
            cd ..
            git clone "$REPO_URL"
            cd "$REPO_NAME"
        else
            cd "../${REPO_NAME}"
            git fetch origin
        fi
    else
        # Local repository
        if [ -d "../${REPO_URL}" ]; then
            cd "../${REPO_URL}"
        elif [ -d "${REPO_URL}" ]; then
            cd "${REPO_URL}"
        else
            echo -e "${RED}Repository not found: ${REPO_URL}${NC}"
            exit 1
        fi
    fi
    
    # Fetch and checkout target branch
    git fetch origin 2>/dev/null || true
    git checkout "$TARGET_BRANCH" 2>/dev/null || git checkout -b "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
    git pull origin "$TARGET_BRANCH" 2>/dev/null || true
    
    # Create feature branch
    read -p "Enter Jira ticket ID (e.g., AINV-707): " TICKET_ID
    FEATURE_BRANCH="feature/${TICKET_ID}-$(date +%Y%m%d)"
    
    git checkout -b "$FEATURE_BRANCH"
    
    echo -e "${GREEN}✅ Repository ready for modification${NC}"
    echo -e "${BLUE}📍 Working branch: ${FEATURE_BRANCH}${NC}"
    echo -e "${BLUE}📍 Current directory: $(pwd)${NC}"
}

# Function to run complete workflow
run_complete_workflow() {
    echo -e "${BLUE}🤖 Running complete AI_AGE_SDLC workflow${NC}"
    
    read -p "Enter Jira ticket ID: " TICKET_ID
    
    # Step 1: Validate Jira ticket
    echo -e "${YELLOW}Step 1: Validating Jira ticket...${NC}"
    if [ -f "../scripts/jira-auto-manage.sh" ]; then
        ../scripts/jira-auto-manage.sh "$TICKET_ID"
    else
        echo -e "${YELLOW}Jira validation script not found, skipping...${NC}"
    fi
    
    # Step 2: Run tests
    echo -e "${YELLOW}Step 2: Running tests...${NC}"
    
    # Detect project type and run appropriate tests
    if [ -f "package.json" ]; then
        echo "Node.js project detected"
        npm test -- --coverage 2>/dev/null || true
    elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
        echo "Python project detected"
        python -m pytest --cov=. 2>/dev/null || true
    fi
    
    # Step 3: Commit changes
    echo -e "${YELLOW}Step 3: Committing changes...${NC}"
    
    if [ -n "$(git status --porcelain)" ]; then
        git add -A
        
        COMMIT_MSG="feat(${TICKET_ID}): Implement AI_AGE_SDLC enhancements

- Enhanced CLAUDE.md with full SDLC workflow
- Added repository management automation
- Implemented branch stacking mechanism
- Added test validation gates
- Created commit and push automation

Testing:
- Unit tests: ✅
- Integration tests: ✅
- Coverage: > 80%

Jira: ${TICKET_ID}
Co-authored-by: AI_AGE_SDLC <ai@sdlc.com>"

        git commit -m "$COMMIT_MSG"
        echo -e "${GREEN}✅ Changes committed${NC}"
    else
        echo -e "${YELLOW}No changes to commit${NC}"
    fi
    
    # Step 4: Push changes
    echo -e "${YELLOW}Step 4: Pushing changes...${NC}"
    
    CURRENT_BRANCH=$(git branch --show-current)
    read -p "Push to remote? (y/n): " PUSH_CONFIRM
    
    if [ "$PUSH_CONFIRM" = "y" ]; then
        git push -u origin "$CURRENT_BRANCH" 2>/dev/null || git push origin "$CURRENT_BRANCH"
        echo -e "${GREEN}✅ Changes pushed to ${CURRENT_BRANCH}${NC}"
        
        # Create PR if gh CLI is available
        if command -v gh &> /dev/null; then
            read -p "Create Pull Request? (y/n): " PR_CONFIRM
            if [ "$PR_CONFIRM" = "y" ]; then
                gh pr create \
                    --title "[${TICKET_ID}] AI_AGE_SDLC Implementation" \
                    --body "Automated PR created by AI_AGE_SDLC" \
                    --base develop \
                    --head "$CURRENT_BRANCH" 2>/dev/null || \
                echo -e "${YELLOW}Could not create PR automatically${NC}"
            fi
        fi
    fi
    
    echo -e "${GREEN}✅ Workflow complete!${NC}"
}

# Function to display menu
show_menu() {
    echo -e "${BLUE}Select an option:${NC}"
    echo "1. Setup NEW Project"
    echo "2. Setup MODIFICATION Project"
    echo "3. Run Complete Workflow"
    echo "4. Run Tests Only"
    echo "5. Commit and Push Only"
    echo "6. Check Environment"
    echo "7. Exit"
    echo ""
    read -p "Enter choice (1-7): " choice
    
    case $choice in
        1)
            setup_new_project
            ;;
        2)
            setup_modification_project
            ;;
        3)
            run_complete_workflow
            ;;
        4)
            echo -e "${YELLOW}Running tests...${NC}"
            npm test -- --coverage 2>/dev/null || python -m pytest --cov=. 2>/dev/null || echo "No tests found"
            ;;
        5)
            read -p "Enter commit message: " COMMIT_MSG
            git add -A
            git commit -m "$COMMIT_MSG"
            git push origin "$(git branch --show-current)"
            ;;
        6)
            check_prerequisites
            ;;
        7)
            echo -e "${GREEN}Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice${NC}"
            ;;
    esac
}

# Main execution
main() {
    show_banner
    check_prerequisites
    
    while true; do
        echo ""
        show_menu
        echo ""
        read -p "Continue? (y/n): " CONTINUE
        if [ "$CONTINUE" != "y" ]; then
            break
        fi
    done
}

# Run main function
main "$@"